AWSTemplateFormatVersion: '2010-09-09'
Description: Comprehensive Production Deployment for Dynamic API System with API
  Perimeter and Security Perimeter
Metadata:
  AWS::Composer::Groups:
    Group:
      Label: AWS Cloud
      Members:
        - Group9
    Group2:
      Label: Api Perimeter
      Members:
        - APIGateway
        - NginxLoadBalancer
        - NginxTargetGroup
        - NginxListener
    Group3:
      Label: Core Services
      Members:
        - FastAPIDeployment
        - ELKStack
        - Grafana
        - Prometheus
        - ELKStackDeployment
        - GrafanaDeployment
        - PrometheusDeployment
        - MicroservicesDeployment
        - EKSCluster
    Group4:
      Label: Databases
      Members:
        - DatabaseSecurityGroup
        - DynamoDBTable
    Group5:
      Label: Networking Components
      Members:
        - PublicSubnet2
    Group6:
      Label: Security Components
      Members:
        - EKSSecurityGroup
    Group7:
      Label: Notifications
      Members:
        - EmailTopic
        - EmailSubscription
    Group8:
      Label: Authentication
      Members:
        - CognitoIdentityPool
        - CognitoUserPoolClient
        - CognitoUserPool
    Group9:
      Label: AWS Cloud
      Members:
        - Group8
        - Group7
        - Group6
        - Group5
        - Group4
        - Group3
        - Group2
        - PrivateSubnet2
        - PrivateSubnet1
        - DatabaseSecret
        - OpenAISecret
        - Route53RecordSet
        - S3BucketForHostingWebsite
        - Api
        - CloudFrontDistribution

Parameters:
  VPC:
    Type: AWS::EC2::VPC::Id
    Description: VPC to deploy resources in
  PublicSubnet1:
    Type: AWS::EC2::Subnet::Id
    Description: Public Subnet 1
  PublicSubnet2:
    Type: AWS::EC2::Subnet::Id
    Description: Public Subnet 2
  PrivateSubnet1:
    Type: AWS::EC2::Subnet::Id
    Description: Private Subnet 1
  PrivateSubnet2:
    Type: AWS::EC2::Subnet::Id
    Description: Private Subnet 2
  EKSSecurityGroup:
    Type: AWS::EC2::SecurityGroup::Id
    Description: Security Group for EKS Cluster
  EKSNodeRole:
    Type: String
    Description: IAM Role for EKS Node Group
  DBUsername:
    Type: String
    Description: Username for the PostgreSQL database
  DBPassword:
    Type: String
    NoEcho: true
    Description: Password for the PostgreSQL database
  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup::Id
    Description: Security Group for the PostgreSQL database
  DatabaseSubnetGroup:
    Type: String
    Description: Subnet Group for the PostgreSQL database
  EmailSource:
    Type: String
    Description: Verified SES email source for sending notifications
  HostedZoneId:
    Type: AWS::Route53::HostedZone::Id
    Description: Route 53 Hosted Zone ID for the domain
  OpenAIAPIKey:
    Type: AWS::SSM::Parameter::Value<String>
    Description: API Key for OpenAI

Resources:
  # Networking Components
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: DynamicAPI-VPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: DynamicAPI-InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: PublicSubnet1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select
        - 1
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: PublicSubnet2

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: PrivateSubnet1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: !Select
        - 1
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: PrivateSubnet2

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: DynamicAPI-RouteTable

  Route:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref RouteTable

  PublicSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref RouteTable

  # Security Components
  EKSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for EKS cluster
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: '-1'
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: EKSSecurityGroup

  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for PostgreSQL database
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: 10.0.0.0/16
      SecurityGroupEgress:
        - IpProtocol: '-1'
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: DatabaseSecurityGroup

  # API Perimeter
  APIGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: DynamicAPI
      Description: API Gateway for managing API traffic
      EndpointConfiguration:
        Types:
          - REGIONAL
      Tags:
        - Key: Name
          Value: APIGateway

  APIResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt APIGateway.RootResourceId
      PathPart: '{proxy+}'
      RestApiId: !Ref APIGateway

  APIIntegration:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: ANY
      ResourceId: !Ref APIResource
      RestApiId: !Ref APIGateway
      Integration:
        IntegrationHttpMethod: ANY
        Type: HTTP_PROXY
        Uri: !Sub http://${NginxLoadBalancer.DNSName}/{proxy}

  APIDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref APIGateway
      StageName: prod
    DependsOn: APIIntegration

  NginxLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: NginxLB
      Scheme: internet-facing
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref EKSSecurityGroup
      Tags:
        - Key: Name
          Value: NginxLoadBalancer

  NginxTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: NginxTG
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPC
      TargetType: ip
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: HTTP
      HealthCheckPath: /health
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 2
      Matcher:
        HttpCode: 200-399
      Tags:
        - Key: Name
          Value: NginxTargetGroup

  NginxListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref NginxTargetGroup
      LoadBalancerArn: !Ref NginxLoadBalancer
      Port: 80
      Protocol: HTTP

  # Core Services
  EKSCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: DynamicAPICluster
      ResourcesVpcConfig:
        SubnetIds:
          - !Ref PublicSubnet1
          - !Ref PublicSubnet2
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        SecurityGroupIds:
          - !Ref EKSSecurityGroup
      RoleArn: !Ref EKSNodeRole
      Tags:
        - Key: Name
          Value: EKSCluster

  FastAPIDeployment:
    Type: AWS::EKS::Nodegroup
    Properties:
      ClusterName: !Ref EKSCluster
      NodegroupName: FastAPIService
      Subnets:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      NodeRole: !Ref EKSNodeRole
      ScalingConfig:
        MinSize: 2
        MaxSize: 4
        DesiredSize: 2
      InstanceTypes:
        - t3.medium
      Tags:
        - Key: Name
          Value: FastAPIDeployment

  MicroservicesDeployment:
    Type: AWS::EKS::Nodegroup
    Properties:
      ClusterName: !Ref EKSCluster
      NodegroupName: Microservices
      Subnets:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      NodeRole: !Ref EKSNodeRole
      ScalingConfig:
        MinSize: 2
        MaxSize: 4
        DesiredSize: 2
      InstanceTypes:
        - t3.medium
      Tags:
        - Key: Name
          Value: MicroservicesDeployment

  PrometheusDeployment:
    Type: AWS::EKS::Nodegroup
    Properties:
      ClusterName: !Ref EKSCluster
      NodegroupName: Prometheus
      Subnets:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      NodeRole: !Ref EKSNodeRole
      ScalingConfig:
        MinSize: 1
        MaxSize: 2
        DesiredSize: 1
      InstanceTypes:
        - t3.medium
      Tags:
        - Key: Name
          Value: PrometheusDeployment

  GrafanaDeployment:
    Type: AWS::EKS::Nodegroup
    Properties:
      ClusterName: !Ref EKSCluster
      NodegroupName: Grafana
      Subnets:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      NodeRole: !Ref EKSNodeRole
      ScalingConfig:
        MinSize: 1
        MaxSize: 2
        DesiredSize: 1
      InstanceTypes:
        - t3.medium
      Tags:
        - Key: Name
          Value: GrafanaDeployment

  ELKStackDeployment:
    Type: AWS::EKS::Nodegroup
    Properties:
      ClusterName: !Ref EKSCluster
      NodegroupName: ELKStack
      Subnets:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      NodeRole: !Ref EKSNodeRole
      ScalingConfig:
        MinSize: 1
        MaxSize: 2
        DesiredSize: 1
      InstanceTypes:
        - t3.medium
      Tags:
        - Key: Name
          Value: ELKStackDeployment

  # Databases
  PostgreSQL:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceClass: db.t3.micro
      Engine: postgres
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      DBName: dynamicapi
      VPCSecurityGroups:
        - !Ref DatabaseSecurityGroup
      DBSubnetGroupName: !Ref DatabaseSubnetGroup
      AllocatedStorage: 20
      BackupRetentionPeriod: 7
      MultiAZ: true
      StorageType: gp2
      Tags:
        - Key: Name
          Value: PostgreSQL

  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: FastAccessConfigs
      AttributeDefinitions:
        - AttributeName: ConfigId
          AttributeType: S
      KeySchema:
        - AttributeName: ConfigId
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      Tags:
        - Key: Name
          Value: DynamoDBTable

  # Monitoring and Logging
  Prometheus:
    Type: AWS::EKS::Nodegroup
    Properties:
      ClusterName: !Ref EKSCluster
      NodegroupName: Prometheus
      Subnets:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      NodeRole: !Ref EKSNodeRole
      ScalingConfig:
        MinSize: 1
        MaxSize: 2
        DesiredSize: 1
      InstanceTypes:
        - t3.medium
      Tags:
        - Key: Name
          Value: Prometheus

  Grafana:
    Type: AWS::EKS::Nodegroup
    Properties:
      ClusterName: !Ref EKSCluster
      NodegroupName: Grafana
      Subnets:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      NodeRole: !Ref EKSNodeRole
      ScalingConfig:
        MinSize: 1
        MaxSize: 2
        DesiredSize: 1
      InstanceTypes:
        - t3.medium
      Tags:
        - Key: Name
          Value: Grafana

  ELKStack:
    Type: AWS::EKS::Nodegroup
    Properties:
      ClusterName: !Ref EKSCluster
      NodegroupName: ELKStack
      Subnets:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      NodeRole: !Ref EKSNodeRole
      ScalingConfig:
        MinSize: 1
        MaxSize: 2
        DesiredSize: 1
      InstanceTypes:
        - t3.medium
      Tags:
        - Key: Name
          Value: ELKStack

  # Notifications
  EmailTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: EmailNotifications

  EmailSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !Ref EmailSource
      Protocol: email
      TopicArn: !Ref EmailTopic

  # Authentication
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: DynamicAPIUserPool
      AutoVerifiedAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: DynamicAPIClient
      UserPoolId: !Ref CognitoUserPool
      GenerateSecret: false

  CognitoIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: DynamicAPIIdentityPool
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
        - ClientId: !Ref CognitoUserPoolClient
          ProviderName: !Sub cognito-idp.${AWS::Region}.amazonaws.com/${CognitoUserPool}

  # Secrets for storing sensitive information
  OpenAISecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: OpenAISecret
      SecretString: !Sub '{"api-key":"${OpenAIAPIKey}"}'

  DatabaseSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: DatabaseSecret
      SecretString: !Sub '{"username":"${DBUsername}","password":"${DBPassword}"}'

  # Hosting and DNS
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !GetAtt S3BucketForHostingWebsite.DomainName
            Id: S3Origin
            S3OriginConfig:
              OriginAccessIdentity: ''
        Enabled: true
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
        ViewerCertificate:
          CloudFrontDefaultCertificate: true

  S3BucketForHostingWebsite:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-webhosting
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html

  Route53RecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Sub api.${AWS::StackName}.example.com
      Type: A
      AliasTarget:
        HostedZoneId: Z2FDTNDATAQYW2
        DNSName: !GetAtt CloudFrontDistribution.DomainName
  Api:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub
        - ${ResourceName} From Stack ${AWS::StackName}
        - ResourceName: Api
      StageName: Prod
      DefinitionBody:
        openapi: '3.0'
        info: {}
        paths:
          /:
            get:
              responses: {}
      EndpointConfiguration: REGIONAL
      TracingEnabled: true
      Auth:
        Authorizers:
          '':
            UserPoolArn: !Sub arn:${AWS::Partition}:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/placeholder
        DefaultAuthorizer: AWS_IAM
      Cors:
        MaxAge: 5

Outputs:
  APIGatewayEndpoint:
    Value: !Sub https://${APIGateway}.execute-api.${AWS::Region}.amazonaws.com/prod
    Description: URL for API Gateway endpoint

  NginxLoadBalancerDNS:
    Value: !GetAtt NginxLoadBalancer.DNSName
    Description: DNS Name of the Nginx Load Balancer

  EKSClusterName:
    Value: !Ref EKSCluster
    Description: Name of the EKS Cluster

  PostgreSQLDatabaseEndpoint:
    Value: !GetAtt PostgreSQL.Endpoint.Address
    Description: Endpoint of the PostgreSQL Database

  CognitoUserPoolId:
    Value: !Ref CognitoUserPool
    Description: User Pool ID for Cognito

  CognitoIdentityPoolId:
    Value: !Ref CognitoIdentityPool
    Description: Identity Pool ID for Cognito

  EmailTopicArn:
    Value: !Ref EmailTopic
    Description: ARN of the SNS topic for email notifications

  CloudFrontDomainName:
    Value: !GetAtt CloudFrontDistribution.DomainName
    Description: CloudFront Domain Name for the hosted website

  S3BucketNameForHosting:
    Value: !Ref S3BucketForHostingWebsite
    Description: S3 Bucket Name for Hosting Website

  Route53RecordSetName:
    Value: !Ref Route53RecordSet
    Description: Route 53 Record Set Name
Transform: AWS::Serverless-2016-10-31